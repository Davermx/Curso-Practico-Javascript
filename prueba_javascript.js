¬°Es hora de poner a prueba cu√°nto sabes sobre JavaScript!

Esta lectura es una prueba de JavaScript.A diferencia de un examen, nadie te obligar√° a nada.Puedes hacer trampa y saltar a la siguiente clase, ese es el camino f√°cil.Pero tengo mucha fe en ti, conf√≠o en que seguir√°s mis consejos y no avanzar√°s a la siguiente clase hasta superar esta prueba.

Instrucciones para tomar esta prueba
Eval√∫a muy cr√≠ticamente tu conocimiento.
Si logras resolver la prueba, no importa cu√°nto te cueste, puedo asegurarte que tienes todo para continuar a la siguiente clase y tomar el resto del curso.
Si no lo logras, no te preocupes, absolutamente nadie puede juzgarte, solo t√∫.
Vuelve al Curso B√°sico de JavaScript, anota los temas clave donde puedes mejorar, ubica las clases donde puedes aprenderlos y estudia vigorosamente.
Es completamente v√°lido hacer b√∫squedas en Google, cursos y tutoriales de Platzi, incluso usar tu cuaderno de notas sin importar si es f√≠sico o virtual.
Recuerda que el √©xito no se mide por cu√°nto tiempo te toma aprender, esa m√©trica es relativamente in√∫til.Mejor conc√©ntrate en completar los cursos de tu ruta de aprendizaje profesional y desarrollar los proyectos que realmente demuestran que dominas cada tecnolog√≠a.

¬°Mucha suerte!

Variables y operaciones
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es una variable y para qu√© sirve ?
¬øCu√°l es la diferencia entre declarar e inicializar una variable ?
¬øCu√°l es la diferencia entre sumar n√∫meros y concatenar strings ?
¬øCu√°l operador me permite sumar o concatenar ?
  2Ô∏è‚É£ Determina el nombre y tipo de dato para almacenar en variables la siguiente informaci√≥n:

Nombre
Apellido
Nombre de usuario en Platzi
Edad
Correo electr√≥nico
Mayor de edad
Dinero ahorrado
Deudas
3Ô∏è‚É£ Traduce a c√≥digo JavaScript las variables del ejemplo anterior y deja tu c√≥digo en los comentarios.

4Ô∏è‚É£ Calcula e imprime las siguientes variables a partir de las variables del ejemplo anterior:

Nombre completo(nombre y apellido)
Dinero real(dinero ahorrado menos deudas)
Funciones
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es una funci√≥n ?
¬øCu√°ndo me sirve usar una funci√≥n en mi c√≥digo ?
¬øCu√°l es la diferencia entre par√°metros y argumentos de una funci√≥n ?
  2Ô∏è‚É£ Convierte el siguiente c√≥digo en una funci√≥n, pero, cambiando cuando sea necesario las variables constantes por par√°metros y argumentos en una funci√≥n:

const name = "Juan David";
const lastname = "Castro Gallego";
const completeName = name + lastname;
const nickname = "juandc";

console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");
Condicionales
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es una condicional ?
¬øQu√© tipos de condicionales existen en JavaScript y cu√°les son sus diferencias ?
¬øPuedo combinar funciones y condicionales ?
  2Ô∏è‚É£ Replica el comportamiento del siguiente c√≥digo que usa la sentencia switch utilizando if, else y else if:

    const tipoDeSuscripcion = "Basic";

switch (tipoDeSuscripcion) {
  case "Free":
    console.log("Solo puedes tomar los cursos gratis");
    break;
  case "Basic":
    console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
    break;
  case "Expert":
    console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
    break;
  case "ExpertPlus":
    console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
    break;
}
3Ô∏è‚É£ Replica el comportamiento de tu condicional anterior con if, else y else if, pero ahora solo con if (sin else ni else if).

  Bonus: si ya eres una experta o experto en el lenguaje, te desaf√≠o a comentar c√≥mo replicar este comportamiento con arrays y un solo condicional.üòè

Ciclos
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es un ciclo ?
¬øQu√© tipos de ciclos existen en JavaScript ?
¬øQu√© es un ciclo infinito y por qu√© es un problema ?
¬øPuedo mezclar ciclos y condicionales ?
  2Ô∏è‚É£ Replica el comportamiento de los siguientes ciclos for utilizando ciclos while:

    for (let i = 0; i < 5; i++) {
      console.log("El valor de i es: " + i);
    }
for (let i = 10; i >= 2; i--) {
  console.log("El valor de i es: " + i);
}
3Ô∏è‚É£ Escribe un c√≥digo en JavaScript que le pregunte a los usuarios cu√°nto es 2 + 2. Si responden bien, mostramos un mensaje de felicitaciones, pero si responden mal, volvemos a empezar.

  Pista: puedes usar la funci√≥n prompt de JavaScript.

    Listas
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es un array ?
¬øQu√© es un objeto ?
¬øCu√°ndo es mejor usar objetos o arrays ?
¬øPuedo mezclar arrays con objetos o incluso objetos con arrays ?
  2Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima su primer elemento.

3Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima todos sus elementos uno por uno(no se vale imprimir el array completo).

4Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier objeto como par√°metro e imprima todos sus elementos uno por uno(no se vale imprimir el objeto completo).

¬øC√≥mo te fue ?üèÜ
¬°Felicidades por completar la prueba de JavaScript! Conf√≠o en que hayas completado cada paso y hayas pausado para repasar los temas de los ejercicios que se te complicaron.

Ahora s√≠, contin√∫a a la siguiente clase, pero recuerda que ya no puedes abandonar el curso, debes completarlo hasta el final.No importa cu√°nto tiempo te tome.Yo s√© que t√∫ puedes y t√∫ deber√≠as de saberlo tambi√©n.Mira todo lo que lograste con esta prueba.üèÜ

¬°Te espero en la siguiente clase para comenza



///////////////////////////////////////////////////////////////////////////////////////////////////////////

RESULTADO DE COMPA√ëEROS.

/* Variables y operaciones */
// 1.-
// a) Una variable es figuradamente una caja donde 	puedes guardar distintas cosas, como por ejemplo :
let number = 23;
const nombre = 'Jes√∫s';
let mayorDeEdad = true;

// b) La diferencia es que al declarar una variable no estamos asign√°ndole alg√∫n valor y al inicializarla si, por ejemplo:
// Declarar
let variable;
// Inicializar
variable = true;
// c) La diferencia  que al sumar strings no se suman los n√∫meros solo se a√±aden ejemplo:

function sumar(a, b) {
  return a + b
}

console.log(sumar(4, 2)); // Resultado 6
console.log(sumar('4', '2')); // Resultado '42'


// d) El operador de m√°s o suma  (+), ejemplo:
function sumar(a, b) {
  return a + b
}

console.log(sumar(4, 2)); // Resultado 6
console.log(sumar('Jes√∫s ', 'Sotelo')); // Resultado 'Jes√∫s Sotelo'

// 2.-
const nombre = 'string';
const apellido = 'string';
let usuarioPlatzi = 'string';
let edad = number;
const email = 'string';
let mayorDeEdad = boolean;
let dineroAhorrado = number;
let deudas = number;

// 3.- Podr√≠amos generar un Objeto
const objeto = {
  nombre: 'Jes√∫s',
  apellido: 'Sotelo',
  usuarioPlatzi: '@Jes√∫sSotelo98',
  edad: 23,
  email: 'jesus_sotelo_98@gmail.com',
  mayorDeEdad: true,
  dineroAhorrado: 2000,
  deudas: 500
}

// 4.-
const nombreCompleto = objeto.nombre + ' ' + objeto.apellido;
console.log(nombreCompleto); // Resultado Jes√∫s Sotelo
const dineroReal = objeto.dineroAhorrado - objeto.deudas;
console.log(dineroReal); // Resultado 1500


/* Funciones */

// 1.-
// a) Un bloque de c√≥digo o de sentencias que se pueden utilizar para generar acciones con los valores que ya se han guardado en variables. En resumen te permiten ahorrar c√≥digo que se repite mucho
sumar('Esta funci√≥n ', 'la declare hasta arriba'); // Resultado 'Esta funci√≥n la declare hasta arriba'

// b) Hay que utilizarlas cuando varias sentencias o algoritmos son iguales y solo cambian algunos par√°metros, esto nos ayuda ahorrarnos mucho c√≥digo.
sumar('Sigo utilizando ', 'la funci√≥n de suma');

// c) Los par√°metros se definen en la funci√≥n pueden ser la cantidad de par√°metros que recibir√° y los argumentos es la informaci√≥n que se la pasara a la funci√≥n.

function parametros(p) { // La (p) representa los par√°metros
  return p + ' solucionado'
}

console.log(parametros('argumento')); // Al declarar la funci√≥n se le agregan los argumentos R: 'argumento solucionado'

// 2.-
function precentacion(n, l, nk) {
  return 'Mi nombre es ' + n + ' ' + l + ', pero prefiero que me digas ' + nk
}
console.log(precentacion('Juan David', 'Castro Gallegos', 'JuanDC')); // Resultado: 'Mi nombre es Juan David Castro Gallegos, pero prefiero que me digas JuanDC'
console.log(precentacion('Jes√∫s', 'Sotelo', 'Chuy')); // Resultado: 'Mi nombre es Jes√∫s Sotelo, pero prefiero que me digas Chuy'

/* Condicionales */

// 1.-
// a) Una condicional indican si se cumple o no una condici√≥n.
function comprobarEdad(edad) {
  if (edad > 18) {
    return console.log('Eres Mayor de edad');
  } else if (edad === 18) {
    return console.log('Apenas y ya eres mayor, ya puedes pasar al teibol');
  } else {
    return console.log('No eres mayor de edad');
  }
}
comprobarEdad(17); // Resultado: No eres mayor de edad
comprobarEdad(18); // Resultado: Apenas y ya eres mayor, ya puedes pasar al teibol
comprobarEdad(23); // Resultado: Eres Mayor de edad

// b) if elseif else, switch, Operador Ternario, Todos hacen lo mismo al comprobar si es true o false pero es diferente la sintaxis y la aplicaci√≥n

// c) S√≠ y es lo mas com√∫n

// 2.-
function tipoDeSuscripcion(s) {
  if (s == 'Free') {
    return console.log("Solo puedes tomar los cursos gratis");
  } else if (s == 'Basic') {
    return console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
  }
  else if (s == 'Expert') {
    return console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
  }
  else if (s == 'Expert +') {
    return console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
  } else {
    return console.log('Que esperas para adquirir tu suscripci√≥n');
  }
}

tipoDeSuscripcion('Expert +'); // Resultado: T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o
tipoDeSuscripcion('no tengo'); // Resultado: Que esperas para adquirir tu suscripci√≥n

// 3.- Jejeje todav√≠a no soy tan pro.

/* Ciclos */

// 1.-
// a) Es una forma r√°pida y sencilla de hacer algo repetidamente
// b) Los ciclos que hay son los ciclos for, for in, for of, while, do while
// c) Es cuando no pones un limite al ciclo como un tope o un break y puede llegar a crashear el navegador o incluso el dispositivo en el que se esta ejecutando el ciclo.
// d) S√≠, es funcional en ciertos casos

// 2.-

let i = 0;
while (i < 5) {
  console.log("El valor de i es: ", i);
  i++;
}

let i = 10;
while (i >= 2) {
  console.log("El valor de i es: ", i);
  i--;
}

// 3.-

function juego() {
  let resultado;
  do {
    resultado = parseInt(prompt('¬øCu√°l es el resultado de "2 + 2". R: '));
  } while (resultado !== 4);
  if (resultado === 4);
  return console.log('¬°Eres un GENIO!');
}
juego();

/* Listas */

// 1.-
// a) Un array es un tipo de datos objetos, puedes guardar distintos valores como si fuera una lista y se encuentran seguidos en memoria.
let lista = ['hola', 'como', 'estas']
// b) Un objeto te permite guardar datos con claves y valores ejemplo:
const objetoCarro = {
  marca: 'Bugatti',
  modelo: 'Chiron',
  precio: '1 USD'
}
// d) Depende mucho, pero algo que ahorita se me viene a la cabeza, es mejor utilizar un objeto cuando tienes que guardar datos que son repetitivos como un usuario que siempre va a tener las mismas claves y solo cambian los valores.
// c) Creo que s√≠.

// 2.-
function array(a) {
  return console.log(a[0]);
}

array(lista);
// 3.-
for (const value of lista) {
  console.log(value);
}
// 4.-
for (const property in objetoCarro) {
  if (Object.hasOwnProperty.call(objetoCarro, property)) {
    const element = objetoCarro[property];
    console.log(element);
  }
}